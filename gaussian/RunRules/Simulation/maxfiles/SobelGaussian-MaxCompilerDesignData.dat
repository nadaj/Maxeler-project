#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2015
#define MAXFILE_MAXCOMPILER_VERSION_NUM          1
#define MAXFILE_MAXCOMPILER_VERSION_POINT        1
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          44944
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2015-08-07"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "SobelGaussian"
#define MAXFILE_BUILD_DIR  "/home/demo/Desktop/MaxCompiler-Builds/SobelGaussian_VECTIS_DFE_SIM"
#define MAXFILE_BUILD_DATE  20160108
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 36)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX3424A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "SobelGaussianKernel.h"
#endif










#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(SobelGaussianKernel, Kernel)
MANAGER_NODE(inImage, PCIe_From_Host_fwd)
MANAGER_NODE(noise, PCIe_From_Host_fwd)
MANAGER_NODE(outImage, PCIe_To_Host_fwd)
MANAGER_NODE(Stream_1, DualAspectMux)
MANAGER_NODE(Stream_4, DualAspectMux)
MANAGER_NODE(Stream_9, DualAspectReg)
MANAGER_NODE(Stream_21, StreamPullPushAdapter)
MANAGER_NODE(Stream_13, Fifo)
MANAGER_NODE(Stream_17, Fifo)
MANAGER_NODE(Stream_19, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(SobelGaussianKernel, inImage, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(SobelGaussianKernel, noise, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(SobelGaussianKernel, outImage, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(inImage, inImage, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(noise, noise, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(outImage, outImage, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_1, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_1, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_4, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_4, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_9, input, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_9, output, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_21, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_21, output, OUT, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_13, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_13, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_17, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_17, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_19, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_19, output, OUT, STREAM, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(inImage, inImage, Stream_1, input, 128)
MANAGER_STREAM(noise, noise, Stream_4, input, 128)
MANAGER_STREAM(SobelGaussianKernel, outImage, Stream_19, input, 32)
MANAGER_STREAM(Stream_1, output, Stream_13, input, 32)
MANAGER_STREAM(Stream_4, output, Stream_17, input, 32)
MANAGER_STREAM(Stream_9, output, Stream_21, input, 128)
MANAGER_STREAM(Stream_21, output, outImage, outImage, 128)
MANAGER_STREAM(Stream_13, output, SobelGaussianKernel, inImage, 32)
MANAGER_STREAM(Stream_17, output, SobelGaussianKernel, noise, 32)
MANAGER_STREAM(Stream_19, output, Stream_9, input, 32)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(SobelGaussianKernel, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
MANAGER_NODE_STACK_TRACE(inImage, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
MANAGER_NODE_STACK_TRACE(noise, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
MANAGER_NODE_STACK_TRACE(outImage, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
MANAGER_NODE_STACK_TRACE(Stream_1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
MANAGER_NODE_STACK_TRACE(Stream_4, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
MANAGER_NODE_STACK_TRACE(Stream_9, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
MANAGER_NODE_STACK_TRACE(Stream_21, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
MANAGER_NODE_STACK_TRACE(Stream_13, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
MANAGER_NODE_STACK_TRACE(Stream_17, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
MANAGER_NODE_STACK_TRACE(Stream_19, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(SobelGaussianKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(SobelGaussianKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(SobelGaussianKernel, SobelGaussianKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(SobelGaussianKernel, inImage, 0)
DEBUG_INPUT_BITS(SobelGaussianKernel, noise, 1)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(SobelGaussianKernel, outImage, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(inImage, PCIePullSourceSyncMax3, "inImage")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(noise, PCIePullSourceSyncMax3, "noise")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_1, DualAspectMuxSync, "Stream_1", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_4, DualAspectMuxSync, "Stream_4", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_13, FifoPushToPullSync, "Stream_13", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_17, FifoPushToPullSync, "Stream_17", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(SobelGaussianKernel, SobelGaussianKernel, "SobelGaussianKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_19, FifoPushToPullSync, "Stream_19", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_9, DualAspectRegSync, "Stream_9", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_21, PullToPushAdapterSync, "Stream_21")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(outImage, PCIePushSinkSyncMax3, "outImage")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 2, 1, 0, 0, 0, 0, 0, 36)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "a6fd63d9db08f57c19b07e40a0ce9751b2e07ad55145480334a11c7e2fa78132")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianKernel, addDebugRegister, reg_dbg_ctld_done, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianKernel, addDebugRegister, reg_dbg_ctld_empty, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianKernel, addDebugRegister, reg_dbg_ctld_read, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 6, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianKernel, addDebugRegister, reg_dbg_ctld_request, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianKernel, addDebugRegister, reg_dbg_fill_level, 6, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianKernel, addDebugRegister, reg_dbg_flush_level, 6, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianKernel, addDebugRegister, reg_dbg_flush_start_level, 6, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianKernel, addDebugRegister, reg_dbg_full_level, 6, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(inImage, STREAM_FROM_HOST, 0)
PCIE_STREAM(noise, STREAM_FROM_HOST, 1)
PCIE_STREAM(outImage, STREAM_TO_HOST, 0)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(SobelGaussianKernel.io_inImage_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(SobelGaussianKernel.io_noise_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(SobelGaussianKernel.io_outImage_force_disabled, 0x2, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(SobelGaussianKernel.run_cycle_count, 0x3, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(SobelGaussianKernel.current_run_cycle_count, 0x9, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(SobelGaussianKernel.dbg_ctld_almost_empty, 0xf, 1, hwBits(2))
REG(SobelGaussianKernel.dbg_ctld_done, 0x10, 1, hwBits(2))
REG(SobelGaussianKernel.dbg_ctld_empty, 0x11, 1, hwBits(2))
REG(SobelGaussianKernel.dbg_ctld_read, 0x12, 1, hwBits(2))
REG(SobelGaussianKernel.dbg_ctld_read_pipe_dbg, 0x13, 1, hwBits(6))
REG(SobelGaussianKernel.dbg_ctld_request, 0x14, 1, hwBits(2))
REG(SobelGaussianKernel.dbg_done_out, 0x15, 1, hwBits(1))
REG(SobelGaussianKernel.dbg_fill_level, 0x16, 1, hwBits(6))
REG(SobelGaussianKernel.dbg_flush_level, 0x17, 1, hwBits(6))
REG(SobelGaussianKernel.dbg_flush_start, 0x18, 1, hwBits(1))
REG(SobelGaussianKernel.dbg_flush_start_level, 0x19, 1, hwBits(6))
REG(SobelGaussianKernel.dbg_flushing, 0x1a, 1, hwBits(1))
REG(SobelGaussianKernel.dbg_full_level, 0x1b, 1, hwBits(6))
REG(SobelGaussianKernel.dbg_out_stall, 0x1c, 1, hwBits(1))
REG(SobelGaussianKernel.dbg_out_valid, 0x1d, 1, hwBits(1))
REG(SobelGaussianKernel.dbg_stall_vector, 0x1e, 1, hwBits(1))
REG(ifpga.ifpga_ctrl, 0x1f, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x20, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(SobelGaussianKernel.io_inImage_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(SobelGaussianKernel.io_noise_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(SobelGaussianKernel.io_outImage_force_disabled, 0x2, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(SobelGaussianKernel.run_cycle_count, 0x3, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(SobelGaussianKernel.current_run_cycle_count, 0x9, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(SobelGaussianKernel.dbg_ctld_almost_empty, 0xf, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(SobelGaussianKernel.dbg_ctld_done, 0x10, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(SobelGaussianKernel.dbg_ctld_empty, 0x11, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(SobelGaussianKernel.dbg_ctld_read, 0x12, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(SobelGaussianKernel.dbg_ctld_read_pipe_dbg, 0x13, 1, hwBits(6), HOST_READ_ONLY, false)
REG_V2(SobelGaussianKernel.dbg_ctld_request, 0x14, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(SobelGaussianKernel.dbg_done_out, 0x15, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelGaussianKernel.dbg_fill_level, 0x16, 1, hwBits(6), HOST_READ_ONLY, false)
REG_V2(SobelGaussianKernel.dbg_flush_level, 0x17, 1, hwBits(6), HOST_READ_ONLY, false)
REG_V2(SobelGaussianKernel.dbg_flush_start, 0x18, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelGaussianKernel.dbg_flush_start_level, 0x19, 1, hwBits(6), HOST_READ_ONLY, false)
REG_V2(SobelGaussianKernel.dbg_flushing, 0x1a, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelGaussianKernel.dbg_full_level, 0x1b, 1, hwBits(6), HOST_READ_ONLY, false)
REG_V2(SobelGaussianKernel.dbg_out_stall, 0x1c, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelGaussianKernel.dbg_out_valid, 0x1d, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelGaussianKernel.dbg_stall_vector, 0x1e, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x1f, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x20, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("a6fd63d9db08f57c19b07e40a0ce9751b2e07ad55145480334a11c7e2fa78132")
#endif

#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAX3REV, MAX3REVA)
CAPABILITY(MAX3RAM, DDR3_24GB)
CAPABILITY(MAX3FPGA, SXT475_2ES)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME SobelGaussian
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_SobelGaussian_H
#define SLIC_DECLARATIONS_SobelGaussian_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define SobelGaussian_PCIE_ALIGNMENT (16)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_N Interface Parameter "N".: Number of data items to process
 * \param [in] instream_inImage The stream should be of size (param_N * 4) bytes.
 * \param [in] instream_noise The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_outImage The stream should be of size (param_N * 4) bytes.
 */
void SobelGaussian(
	int32_t param_N,
	const int32_t *instream_inImage,
	const float *instream_noise,
	int32_t *outstream_outImage);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_N Interface Parameter "N".: Number of data items to process
 * \param [in] instream_inImage The stream should be of size (param_N * 4) bytes.
 * \param [in] instream_noise The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_outImage The stream should be of size (param_N * 4) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *SobelGaussian_nonblock(
	int32_t param_N,
	const int32_t *instream_inImage,
	const float *instream_noise,
	int32_t *outstream_outImage);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	int32_t param_N; /**<  [in] Interface Parameter "N".: Number of data items to process */
	const int32_t *instream_inImage; /**<  [in] The stream should be of size (param_N * 4) bytes. */
	const float *instream_noise; /**<  [in] The stream should be of size (param_N * 4) bytes. */
	int32_t *outstream_outImage; /**<  [out] The stream should be of size (param_N * 4) bytes. */
} SobelGaussian_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void SobelGaussian_run(
	max_engine_t *engine,
	SobelGaussian_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *SobelGaussian_run_nonblock(
	max_engine_t *engine,
	SobelGaussian_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void SobelGaussian_run_group(max_group_t *group, SobelGaussian_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *SobelGaussian_run_group_nonblock(max_group_t *group, SobelGaussian_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void SobelGaussian_run_array(max_engarray_t *engarray, SobelGaussian_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *SobelGaussian_run_array_nonblock(max_engarray_t *engarray, SobelGaussian_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* SobelGaussian_convert(max_file_t *maxfile, SobelGaussian_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* SobelGaussian_init(void);

/* Error handling functions */
int SobelGaussian_has_errors(void);
const char* SobelGaussian_get_errors(void);
void SobelGaussian_clear_errors(void);
/* Free statically allocated maxfile data */
void SobelGaussian_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int SobelGaussian_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int SobelGaussian_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_SobelGaussian_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(SobelGaussianKernel, 19, NodeInputMappedReg, "Scalar input (io_outImage_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nsobelgaussian.SobelGaussianKernel.<init>(SobelGaussianKernel.maxj:27)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:19)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 20, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nsobelgaussian.SobelGaussianKernel.<init>(SobelGaussianKernel.maxj:27)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:19)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 3, NodeInputMappedReg, "Scalar input (io_noise_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nsobelgaussian.SobelGaussianKernel.<init>(SobelGaussianKernel.maxj:19)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:19)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 4, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nsobelgaussian.SobelGaussianKernel.<init>(SobelGaussianKernel.maxj:19)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:19)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 5, NodeInput, "Input(noise)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nsobelgaussian.SobelGaussianKernel.<init>(SobelGaussianKernel.maxj:19)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:19)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 43, NodeConstantRawBits, "{HWFloat:8, 24}\n0x437f0000; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:791)\nsobelgaussian.SobelGaussianKernel.<init>(SobelGaussianKernel.maxj:21)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:19)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 7, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:791)\nsobelgaussian.SobelGaussianKernel.<init>(SobelGaussianKernel.maxj:21)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:19)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 35, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 42, NodeConstantRawBits, "{HWFloat:8, 24}\n0x437f0000; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:89)\nsobelgaussian.SobelGaussianKernel.<init>(SobelGaussianKernel.maxj:21)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:19)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 9, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1152)\nsobelgaussian.SobelGaussianKernel.<init>(SobelGaussianKernel.maxj:21)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:19)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 41, NodeConstantRawBits, "{HWFloat:8, 24}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:837)\nsobelgaussian.SobelGaussianKernel.<init>(SobelGaussianKernel.maxj:22)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:19)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 11, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:837)\nsobelgaussian.SobelGaussianKernel.<init>(SobelGaussianKernel.maxj:22)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:19)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 36, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 40, NodeConstantRawBits, "{HWFloat:8, 24}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:89)\nsobelgaussian.SobelGaussianKernel.<init>(SobelGaussianKernel.maxj:22)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:19)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 13, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1152)\nsobelgaussian.SobelGaussianKernel.<init>(SobelGaussianKernel.maxj:22)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:19)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 39, NodeConstantRawBits, "{HWFloat:8, 24}\n0x3f000000; 0.5", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:89)\nsobelgaussian.SobelGaussianKernel.<init>(SobelGaussianKernel.maxj:24)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:19)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 15, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:868)\nsobelgaussian.SobelGaussianKernel.<init>(SobelGaussianKernel.maxj:24)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:19)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 16, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:165)\nsobelgaussian.SobelGaussianKernel.<init>(SobelGaussianKernel.maxj:26)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:19)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 0, NodeInputMappedReg, "Scalar input (io_inImage_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nsobelgaussian.SobelGaussianKernel.<init>(SobelGaussianKernel.maxj:18)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:19)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 1, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nsobelgaussian.SobelGaussianKernel.<init>(SobelGaussianKernel.maxj:18)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:19)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 2, NodeInput, "Input(inImage)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nsobelgaussian.SobelGaussianKernel.<init>(SobelGaussianKernel.maxj:18)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:19)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 17, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:868)\nsobelgaussian.SobelGaussianKernel.<init>(SobelGaussianKernel.maxj:26)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:19)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 22, NodeOutput, "Output(outImage)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nsobelgaussian.SobelGaussianKernel.<init>(SobelGaussianKernel.maxj:27)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:19)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 27, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 38, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 24, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 25, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 26, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 28, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 37, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 30, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 31, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 33, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 34, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
PHOTON_NODE_DATA(SobelGaussianKernel, 32, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nsobelgaussian.SobelGaussianManager.main(SobelGaussianManager.maxj:23)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int SobelGaussian_has_errors(void)
{	return stored_has_error; }
const char* SobelGaussian_get_errors(void)
{	return stored_error; }
void SobelGaussian_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char SobelGaussian_use_simulation[16];
static void SobelGaussian_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(SobelGaussian_use_simulation, 16, "SobelGau_%05ld_", pid);
}
static const char *SobelGaussian_check_use_simulation(void)
{
	SobelGaussian_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = SobelGaussian_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int SobelGaussian_simulation_launch = 0;
int SobelGaussian_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = SobelGaussian_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int SobelGaussian_simulator_stop(void)
{
	const char *use_sim = SobelGaussian_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void SobelGaussian_static_init(void) 
{
	stored_maxfile = SobelGaussian_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = SobelGaussian_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = SobelGaussian_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			SobelGaussian_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void SobelGaussian_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (SobelGaussian_simulation_launch == 1) {
		int sim_stat = SobelGaussian_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		SobelGaussian_simulation_launch = 0;
	}
}

static int SobelGaussian_get_pcie_alignment(void)
{
#ifdef SobelGaussian_PCIE_ALIGNMENT
	return ((SobelGaussian_PCIE_ALIGNMENT < 1) ? 16 : SobelGaussian_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int SobelGaussian_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = SobelGaussian_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *SobelGaussian_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = SobelGaussian_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct SobelGaussian_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} SobelGaussian_callback_stream_t;

typedef struct SobelGaussian_callback_data {
	SobelGaussian_callback_stream_t stream[3]; 
	int count;
	int max_count;
} SobelGaussian_callback_data_t;

static void SobelGaussian_callback_internal(void *cb_data)
{
	SobelGaussian_callback_data_t *data = (SobelGaussian_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		SobelGaussian_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* SobelGaussian_convert_internal(
	max_file_t *maxfile,
	SobelGaussian_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	SobelGaussian_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(SobelGaussian_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function SobelGaussian_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 3;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &SobelGaussian_callback_internal;
	}

	int32_t param_N = interface_actions->param_N;
	
	/* code for scalar SobelGaussianKernel.run_cycle_count */
	uint64_t ticks_SobelGaussianKernel = param_N;
	max_set_ticks(actions, "SobelGaussianKernel", param_N);
	CHECK_ERRORS;
	/* end of code for scalar SobelGaussianKernel.run_cycle_count*/
	
	int64_t tmp_0 = (param_N * 4);
	
	/* code for stream inImage */
	size_t instream_size_inImage = tmp_0;
	if (instream_size_inImage > 0) {
		const int32_t *stream_ptr = interface_actions->instream_inImage;
		if (use_callback && (1 == SobelGaussian_check_aligned(interface_actions->instream_inImage))) {
			int32_t *aligned_instream_inImage = malloc(instream_size_inImage);
			if (aligned_instream_inImage == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'inImage'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_inImage;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_inImage;
			(&cb_data->stream[cb_data->count])->size        = instream_size_inImage;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_inImage, interface_actions->instream_inImage, instream_size_inImage);
			stream_ptr = aligned_instream_inImage;
		}
		max_queue_input(actions, "inImage", stream_ptr, instream_size_inImage);
		CHECK_ERRORS;
	}
	/* end of code for stream inImage */
	
	int64_t tmp_1 = (param_N * 4);
	
	/* code for stream noise */
	size_t instream_size_noise = tmp_1;
	if (instream_size_noise > 0) {
		const float *stream_ptr = interface_actions->instream_noise;
		if (use_callback && (1 == SobelGaussian_check_aligned(interface_actions->instream_noise))) {
			float *aligned_instream_noise = malloc(instream_size_noise);
			if (aligned_instream_noise == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'noise'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_noise;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_noise;
			(&cb_data->stream[cb_data->count])->size        = instream_size_noise;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_noise, interface_actions->instream_noise, instream_size_noise);
			stream_ptr = aligned_instream_noise;
		}
		max_queue_input(actions, "noise", stream_ptr, instream_size_noise);
		CHECK_ERRORS;
	}
	/* end of code for stream noise */
	
	int64_t tmp_2 = (param_N * 4);
	
	/* code for stream outImage */
	size_t outstream_size_outImage = tmp_2;
	if (outstream_size_outImage > 0) {
		int32_t *stream_ptr = interface_actions->outstream_outImage;
		if (use_callback && (1 == SobelGaussian_check_aligned(interface_actions->outstream_outImage))) {
			int32_t *aligned_outstream_outImage = malloc(outstream_size_outImage);
			if (aligned_outstream_outImage == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'outImage'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_outImage;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_outImage;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_outImage;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_outImage;
		}
		max_queue_output(actions, "outImage", stream_ptr, outstream_size_outImage);
		CHECK_ERRORS;
	}
	/* end of code for stream outImage */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void SobelGaussian(
	int32_t param_N,
	const int32_t *instream_inImage,
	const float *instream_noise,
	int32_t *outstream_outImage)
{
	(void) pthread_once(&slic_bs_is_initialised, SobelGaussian_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = SobelGaussian_nonblock(param_N, instream_inImage, instream_noise, outstream_outImage);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *SobelGaussian_nonblock(
	int32_t param_N,
	const int32_t *instream_inImage,
	const float *instream_noise,
	int32_t *outstream_outImage)
{
	SobelGaussian_actions_t interface_actions;
	interface_actions.param_N = param_N;
	interface_actions.instream_inImage = instream_inImage;
	interface_actions.instream_noise = instream_noise;
	interface_actions.outstream_outImage = outstream_outImage;
	(void) pthread_once(&slic_bs_is_initialised, SobelGaussian_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = SobelGaussian_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void SobelGaussian_run(
	max_engine_t *engine,
	SobelGaussian_actions_t *interface_actions)
{
	max_run_t *run = SobelGaussian_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *SobelGaussian_run_nonblock(
	max_engine_t *engine,
	SobelGaussian_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = SobelGaussian_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void SobelGaussian_run_group(max_group_t *group, SobelGaussian_actions_t *interface_actions)
{
	max_run_t *run = SobelGaussian_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *SobelGaussian_run_group_nonblock(max_group_t *group, SobelGaussian_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = SobelGaussian_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void SobelGaussian_run_array(max_engarray_t *engarray, SobelGaussian_actions_t *interface_actions[])
{
	max_run_t *run = SobelGaussian_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *SobelGaussian_run_array_nonblock(max_engarray_t *engarray, SobelGaussian_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = SobelGaussian_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* SobelGaussian_convert(max_file_t *maxfile, SobelGaussian_actions_t *interface_actions)
{
	return SobelGaussian_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(int32_t, N, param_N)	
SLIC_SET_TICKS(SobelGaussianKernel, param_N)	
SLIC_TEMP_VAR(int64_t tmp_0 = (param_N * 4);)	
SLIC_STREAM(inImage, tmp_0)	
SLIC_TEMP_VAR(int64_t tmp_1 = (param_N * 4);)	
SLIC_STREAM(noise, tmp_1)	
SLIC_TEMP_VAR(int64_t tmp_2 = (param_N * 4);)	
SLIC_STREAM(outImage, tmp_2)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IlNvYmVsR2F1c3NpYW4uaCIg
bmFtZT0iU29iZWxHYXVzc2lhbiI+PGNvbnN0YW50IG5hbWU9IlBDSUVfQUxJR05NRU5UIiB0eXBl
PSJsb25nIiB2YWx1ZT0iMTYiLz48ZW5naW5lbW9kZSBuYW1lPSJkZWZhdWx0Ij48ZnVuY3Rpb24g
bmFtZT0iU29iZWxHYXVzc2lhbiIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48c2NhbGFyIGRlc2M9Iklu
dGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7TiZxdW90Oy46IE51bWJlciBvZiBkYXRhIGl0ZW1zIHRv
IHByb2Nlc3MiIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX04iIHR5cGU9ImludDMyX3Qi
Lz48YXJyYXkgZGVzYz0iVGhlIHN0cmVhbSBzaG91bGQgYmUgb2Ygc2l6ZSAocGFyYW1fTiAqIDQp
IGJ5dGVzLiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5zdHJlYW1faW5JbWFnZSIgc2l6ZT0i
KHBhcmFtX04gKiA0KSIgdHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJpbnQzMl90Ij48ZGltZW5zaW9u
IGluZGV4PSIwIj48bGVuZ3RoPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJh
dG9yPSIvIiB2YWx1ZT0iKChwYXJhbV9OICogNCkgLyA0KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmlu
YXJ5T3BlcmF0b3Igb3BlcmF0b3I9IioiIHZhbHVlPSIocGFyYW1fTiAqIDQpIj48dXNlclBhcmFt
IHZhbHVlPSJwYXJhbV9OIi8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9w
ZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5h
cnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lvbj48L2FycmF5Pjxh
cnJheSBkZXNjPSJUaGUgc3RyZWFtIHNob3VsZCBiZSBvZiBzaXplIChwYXJhbV9OICogNCkgYnl0
ZXMuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJpbnN0cmVhbV9ub2lzZSIgc2l6ZT0iKHBhcmFt
X04gKiA0KSIgdHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJmbG9hdCI+PGRpbWVuc2lvbiBpbmRleD0i
MCI+PGxlbmd0aD48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVyYXRvcj0iLyIg
dmFsdWU9IigocGFyYW1fTiAqIDQpIC8gNCkiPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJh
dG9yIG9wZXJhdG9yPSIqIiB2YWx1ZT0iKHBhcmFtX04gKiA0KSI+PHVzZXJQYXJhbSB2YWx1ZT0i
cGFyYW1fTiIvPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48
L2Z1bmN0aW9uQ2FsbD48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0
b3I+PC9mdW5jdGlvbkNhbGw+PC9sZW5ndGg+PC9kaW1lbnNpb24+PC9hcnJheT48YXJyYXkgZGVz
Yz0iVGhlIHN0cmVhbSBzaG91bGQgYmUgb2Ygc2l6ZSAocGFyYW1fTiAqIDQpIGJ5dGVzLiIgZGly
ZWN0aW9uPSJPdXRwdXQiIG5hbWU9Im91dHN0cmVhbV9vdXRJbWFnZSIgc2l6ZT0iKHBhcmFtX04g
KiA0KSIgdHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJpbnQzMl90Ij48ZGltZW5zaW9uIGluZGV4PSIw
Ij48bGVuZ3RoPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2
YWx1ZT0iKChwYXJhbV9OICogNCkgLyA0KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0
b3Igb3BlcmF0b3I9IioiIHZhbHVlPSIocGFyYW1fTiAqIDQpIj48dXNlclBhcmFtIHZhbHVlPSJw
YXJhbV9OIi8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwv
ZnVuY3Rpb25DYWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRv
cj48L2Z1bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lvbj48L2FycmF5PjwvZnVuY3Rpb24+
PC9lbmdpbmVtb2RlPjwvbWF4ZmlsZT4=
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBTb2JlbEdhdXNzaWFuX2hhc19lcnJvcnModm9pZCkKewlyZXR1cm4gc3RvcmVkX2hh
c19lcnJvcjsgfQpjb25zdCBjaGFyKiBTb2JlbEdhdXNzaWFuX2dldF9lcnJvcnModm9pZCkKewly
ZXR1cm4gc3RvcmVkX2Vycm9yOyB9CnZvaWQgU29iZWxHYXVzc2lhbl9jbGVhcl9lcnJvcnModm9p
ZCkKewoJZnJlZShzdG9yZWRfZXJyb3IpOwoJc3RvcmVkX2Vycm9yID0gTlVMTDsKCXN0b3JlZF9o
YXNfZXJyb3IgPSAwOwp9CgpzdGF0aWMgY2hhciBTb2JlbEdhdXNzaWFuX3VzZV9zaW11bGF0aW9u
WzE2XTsKc3RhdGljIHZvaWQgU29iZWxHYXVzc2lhbl9kZWZfdXNlX3NpbXVsYXRpb24odm9pZCkK
ewoJbG9uZyBwaWQgPSAoKGxvbmcpIGdldHBpZCgpKSAlIDEwMDAwMDsKCXNucHJpbnRmKFNvYmVs
R2F1c3NpYW5fdXNlX3NpbXVsYXRpb24sIDE2LCAiU29iZWxHYXVfJTA1bGRfIiwgcGlkKTsKfQpz
dGF0aWMgY29uc3QgY2hhciAqU29iZWxHYXVzc2lhbl9jaGVja191c2Vfc2ltdWxhdGlvbih2b2lk
KQp7CglTb2JlbEdhdXNzaWFuX2RlZl91c2Vfc2ltdWxhdGlvbigpOwoJY29uc3QgY2hhciAqdXNl
X3NpbSA9IG1heF9jb25maWdfZ2V0X3N0cmluZyhNQVhfQ09ORklHX1VTRV9TSU1VTEFUSU9OKTsK
CWlmICh1c2Vfc2ltID09IE5VTEwpIHsKCQl1c2Vfc2ltID0gU29iZWxHYXVzc2lhbl91c2Vfc2lt
dWxhdGlvbjsKCQltYXhfY29uZmlnX3NldF9zdHJpbmcoTUFYX0NPTkZJR19VU0VfU0lNVUxBVElP
TiwgdXNlX3NpbSk7Cgl9CglyZXR1cm4gdXNlX3NpbTsKfQoKc3RhdGljIGludCBTb2JlbEdhdXNz
aWFuX3NpbXVsYXRpb25fbGF1bmNoID0gMDsKaW50IFNvYmVsR2F1c3NpYW5fc2ltdWxhdG9yX3N0
YXJ0KHZvaWQpCnsKCWludCByZXR2YWwgPSAwOwoJY29uc3QgY2hhciAqdXNlX3NpbSA9IFNvYmVs
R2F1c3NpYW5fY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWNoYXIgYnVmZlsxMDI0XTsKCXNucHJp
bnRmKGJ1ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQQVRIIG1heGNvbXBpbGVyc2ltIC1kIDEg
LW4gJXMgLWMgTUFYMzQyNEEgLVMgc2ltdXRpbHMgcmVzdGFydCIsIHVzZV9zaW0pOwoJRklMRSAq
cGlwZV9mcCA9IHBvcGVuKGJ1ZmYsICJyIik7CglpZiAocGlwZV9mcCA9PSBOVUxMKSB7CgkJc3Ry
bmNhdChidWZmLCAiIDogZmFpbGVkIHRvIGV4ZWN1dGUuIiwgKDEwMjQgLSBzdHJsZW4oYnVmZikp
KTsKCQlzZXRfZXJyb3IoYnVmZik7CgkJcmV0dXJuIC0xOwoJfQoJd2hpbGUgKGZnZXRzKGJ1ZmYs
IDEwMjQsIHBpcGVfZnApICE9IE5VTEwpIHsKCQkvKiBVbmNvbW1lbnQgdGhpcyB0byBnZXQgc2lt
dWxhdG9yIGNvbW1hbmQgb3V0cHV0ICovCgkJLyogZnByaW50ZihzdGRlcnIsIGJ1ZmYpOyAqLwoJ
CWlmIChzdHJzdHIoYnVmZiwgIkVycm9yIikpIHsKCQkJc2V0X2Vycm9yKGJ1ZmYpOwoJCQlyZXR2
YWwgPSAtMTsKCQl9Cgl9CglwY2xvc2UocGlwZV9mcCk7CglyZXR1cm4gcmV0dmFsOwp9CgppbnQg
U29iZWxHYXVzc2lhbl9zaW11bGF0b3Jfc3RvcCh2b2lkKQp7Cgljb25zdCBjaGFyICp1c2Vfc2lt
ID0gU29iZWxHYXVzc2lhbl9jaGVja191c2Vfc2ltdWxhdGlvbigpOwoJY2hhciBidWZmWzEwMjRd
OwoJc25wcmludGYoYnVmZiwgMTAyNCwgIlBBVEg9c2ltdXRpbHM6JFBBVEggbWF4Y29tcGlsZXJz
aW0gLWQgMSAtbiAlcyAtYyBNQVgzNDI0QSAtUyBzaW11dGlscyBzdG9wIiwgdXNlX3NpbSk7CglG
SUxFICpwaXBlX2ZwID0gcG9wZW4oYnVmZiwgInIiKTsKCWlmIChwaXBlX2ZwID09IE5VTEwpIHsK
CQlzdHJuY2F0KGJ1ZmYsICIgOiBmYWlsZWQgdG8gZXhlY3V0ZS4iLCAoMTAyNCAtIHN0cmxlbihi
dWZmKSkpOwoJCXNldF9lcnJvcihidWZmKTsKCQlyZXR1cm4gLTE7Cgl9Cgl3aGlsZSAoZmdldHMo
YnVmZiwgMTAyNCwgcGlwZV9mcCkgIT0gTlVMTCkgewoJCS8qIFVuY29tbWVudCB0aGlzIHRvIGdl
dCBzaW11bGF0b3IgY29tbWFuZCBvdXRwdXQgKi8KCQkvKiBmcHJpbnRmKHN0ZGVyciwgYnVmZik7
ICovCgkJOwoJfQoJcGNsb3NlKHBpcGVfZnApOwoJcmV0dXJuIDA7Cn0KCnN0YXRpYyB2b2lkIFNv
YmVsR2F1c3NpYW5fc3RhdGljX2luaXQodm9pZCkgCnsKCXN0b3JlZF9tYXhmaWxlID0gU29iZWxH
YXVzc2lhbl9pbml0KCk7CglpZiAoc3RvcmVkX21heGZpbGUgPT0gTlVMTCB8fCAhbWF4X29rKHN0
b3JlZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCWlmKG1h
eF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VS
Uk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJVbmFibGUgdG8gbG9hZCBtYXhmaWxl
Iik7IHJldHVybjsgfQoJfQoJaWYoIW1heF9vayhtYXhfZ2xvYmFsX2Vycm9ycygpKSkgewoJCXNl
dF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKG1heF9nbG9iYWxfZXJyb3JzKCkpKTsK
CQlyZXR1cm47Cgl9CglpZighbWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19J
TlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKQoJCW1heF9lcnJvcnNfbW9kZShzdG9yZWRfbWF4Zmls
ZS0+ZXJyb3JzLCAwKTsKCXRpbWVfdCB0aW1lb3V0X3ByZXZpb3VzID0gbWF4X2xvYWRfdGltZW91
dChzdG9yZWRfbWF4ZmlsZSwgMzApOwoJY29uc3QgY2hhciAqdXNlX3NpbSA9IFNvYmVsR2F1c3Np
YW5fY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWlmIChtYXhfcGluZ19kYWVtb24oc3RvcmVkX21h
eGZpbGUsIHVzZV9zaW0pID09IDApIHsKCQlpbnQgc2ltX3N0YXQgPSBTb2JlbEdhdXNzaWFuX3Np
bXVsYXRvcl9zdGFydCgpOwoJCWlmICgoc2ltX3N0YXQgPT0gMCkgJiYgKG1heF9waW5nX2RhZW1v
bihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMSkpIHsKCQkJU29iZWxHYXVzc2lhbl9zaW11
bGF0aW9uX2xhdW5jaCA9IDE7CgkJfSBlbHNlIHsKCQkJc2V0X2Vycm9yKCJFcnJvcjogQW4gZXJy
b3Igb2NjdXJyZWQgd2hpbGUgdHJ5aW5nIHRvIHN0YXJ0IHRoZSBzaW11bGF0aW9uIGluZnJhc3Ry
dWN0dXJlIGF1dG9tYXRpY2FsbHkuIik7CgkJCXNldF9lcnJvcigiRXJyb3I6IENoZWNrIHRoYXQg
J3VzZV9zaW11bGF0aW9uPTxzaW11bGF0b3JfbmFtZT4nIGlzIHNldCBjb3JyZWN0bHkgaW4geW91
ciBTTGlDIGNvbmZpZ3VyYXRpb24iKTsKCQkJc2V0X2Vycm9yKCJFcnJvcjogYW5kIHRoYXQgdGhl
IGFzc29jaWF0ZWQgc2ltdWxhdGVkIHN5c3RlbSBkYWVtb24gaXMgcnVubmluZy4iKTsKCQkJbWF4
X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJCXN0b3JlZF9tYXhmaWxlID0gTlVMTDsKCQkJ
cmV0dXJuOwoJCX0KCX0KCXN0b3JlZF9lbmdpbmUgPSBtYXhfbG9hZChzdG9yZWRfbWF4ZmlsZSwg
IioiKTsKCWlmICghbWF4X29rKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJaWYobWF4X2Nv
bmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1Ip
KSB7CgkJCWZwcmludGYoc3RkZXJyLCAiXG5VbmFibGUgdG8gbG9hZCBlbmdpbmU6IGFib3J0aW5n
IG5vdy5cblxuIik7CgkJCWZmbHVzaChzdGRlcnIpOwoJCQlhYm9ydCgpOwoJCX0gZWxzZSB7CgkJ
CXNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKHN0b3JlZF9tYXhmaWxlLT5lcnJv
cnMpKTsKCQkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJCXN0b3JlZF9tYXhmaWxl
ID0gTlVMTDsKCQkJcmV0dXJuOwoJCX0gCgl9IAoJbWF4X2xvYWRfdGltZW91dChzdG9yZWRfbWF4
ZmlsZSwgdGltZW91dF9wcmV2aW91cyk7Cn0Kdm9pZCBTb2JlbEdhdXNzaWFuX2ZyZWUodm9pZCkK
ewoJaWYgKHN0b3JlZF9lbmdpbmUgIT0gTlVMTCkgewoJCW1heF91bmxvYWQoc3RvcmVkX2VuZ2lu
ZSk7CgkJc3RvcmVkX2VuZ2luZSA9IE5VTEw7Cgl9CglpZiAoc3RvcmVkX21heGZpbGUgIT0gTlVM
TCkgewoJCW1heF9maWxlX2ZyZWUoc3RvcmVkX21heGZpbGUpOwoJCXN0b3JlZF9tYXhmaWxlID0g
TlVMTDsKCX0KCWlmIChzdG9yZWRfZXJyb3IgIT0gTlVMTCkgewoJCWZyZWUoc3RvcmVkX2Vycm9y
KTsKCQlzdG9yZWRfZXJyb3IgPSBOVUxMOwoJfQoJaWYgKFNvYmVsR2F1c3NpYW5fc2ltdWxhdGlv
bl9sYXVuY2ggPT0gMSkgewoJCWludCBzaW1fc3RhdCA9IFNvYmVsR2F1c3NpYW5fc2ltdWxhdG9y
X3N0b3AoKTsKCQlpZiAoc2ltX3N0YXQgIT0gMCApIHsKCQkJZnByaW50ZihzdGRlcnIsICJFcnJv
ciBzdG9wcGluZyBzaW11bGF0b3IuIik7CgkJfQoJCVNvYmVsR2F1c3NpYW5fc2ltdWxhdGlvbl9s
YXVuY2ggPSAwOwoJfQp9CgpzdGF0aWMgaW50IFNvYmVsR2F1c3NpYW5fZ2V0X3BjaWVfYWxpZ25t
ZW50KHZvaWQpCnsKI2lmZGVmIFNvYmVsR2F1c3NpYW5fUENJRV9BTElHTk1FTlQKCXJldHVybiAo
KFNvYmVsR2F1c3NpYW5fUENJRV9BTElHTk1FTlQgPCAxKSA/IDE2IDogU29iZWxHYXVzc2lhbl9Q
Q0lFX0FMSUdOTUVOVCk7CiNlbHNlCglyZXR1cm4gMTY7CiNlbmRpZgp9CgpzdGF0aWMgaW50IFNv
YmVsR2F1c3NpYW5fY2hlY2tfYWxpZ25lZChjb25zdCB2b2lkICpkYXRhKQp7Cgl1aW50cHRyX3Qg
cG9pbnRlciA9ICh1aW50cHRyX3QpIGRhdGE7CglpbnQgYWxpZ25tZW50ID0gU29iZWxHYXVzc2lh
bl9nZXRfcGNpZV9hbGlnbm1lbnQoKTsKCXJldHVybiAocG9pbnRlciAlIGFsaWdubWVudCkgPyAx
IDogMDsKfQoKc3RhdGljIHZvaWQgKlNvYmVsR2F1c3NpYW5fbWFsbG9jX2FsaWduZWQoY29uc3Qg
c2l6ZV90IHNpemUpCnsKCXZvaWQgKnB0cjsKCWludCBhbGlnbm1lbnQgPSBTb2JlbEdhdXNzaWFu
X2dldF9wY2llX2FsaWdubWVudCgpOwoJcG9zaXhfbWVtYWxpZ24oJnB0ciwgYWxpZ25tZW50LCBz
aXplKTsKCXJldHVybiBwdHI7Cn0KCgoKLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tIEludGVyZmFjZSBkZWZhdWx0IC0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgoKI2RlZmluZSBDSEVDS19F
UlJPUlNfU1QoU1QsIFJFVCkgaWYoIW1heF9vayhTVC0+ZXJyb3JzKSkgeyBpZihtYXhfY29uZmln
X2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIHsg
ZnByaW50ZihzdGRlcnIsICIlc1xuIiwgbWF4X2Vycm9yc190cmFjZShTVC0+ZXJyb3JzKSk7IGFi
b3J0KCk7IH0gc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJhY2UoU1QtPmVycm9ycykp
OyByZXR1cm4gUkVUOyB9IAojZGVmaW5lIENIRUNLX05VTEwoVkFMVUUsIE1FU1NBR0UsIFJFVCkg
aWYoVkFMVUUgPT0gTlVMTCkgeyBpZiAobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NU
QVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSB7IGZwcmludGYoc3RkZXJyLCAiJXNcbiVz
XG4iLCAoc3RvcmVkX2Vycm9yID09IE5VTEwpID8gIiIgOiBzdG9yZWRfZXJyb3IsIE1FU1NBR0Up
OyBhYm9ydCgpOyB9IHNldF9lcnJvcihNRVNTQUdFKTsgcmV0dXJuIFJFVDsgfQoKIAp0eXBlZGVm
IHN0cnVjdCBTb2JlbEdhdXNzaWFuX2NhbGxiYWNrX3N0cmVhbSB7Cgl1aW50OF90ICp1c2VyX3B0
cjsKCXVpbnQ4X3QgKmFsaWduZWRfcHRyOwoJc2l6ZV90ICAgc2l6ZTsKCWludCAgICAgIGlzX291
dHB1dDsKfSBTb2JlbEdhdXNzaWFuX2NhbGxiYWNrX3N0cmVhbV90OwoKdHlwZWRlZiBzdHJ1Y3Qg
U29iZWxHYXVzc2lhbl9jYWxsYmFja19kYXRhIHsKCVNvYmVsR2F1c3NpYW5fY2FsbGJhY2tfc3Ry
ZWFtX3Qgc3RyZWFtWzNdOyAKCWludCBjb3VudDsKCWludCBtYXhfY291bnQ7Cn0gU29iZWxHYXVz
c2lhbl9jYWxsYmFja19kYXRhX3Q7CgpzdGF0aWMgdm9pZCBTb2JlbEdhdXNzaWFuX2NhbGxiYWNr
X2ludGVybmFsKHZvaWQgKmNiX2RhdGEpCnsKCVNvYmVsR2F1c3NpYW5fY2FsbGJhY2tfZGF0YV90
ICpkYXRhID0gKFNvYmVsR2F1c3NpYW5fY2FsbGJhY2tfZGF0YV90KikgY2JfZGF0YTsKCWZvciAo
aW50IGkgPSAwIDsgaSA8IGRhdGEtPmNvdW50IDsgaSsrICkgewoJCVNvYmVsR2F1c3NpYW5fY2Fs
bGJhY2tfc3RyZWFtX3QgKnMgPSAmZGF0YS0+c3RyZWFtW2ldOwoJCWlmIChzLT5pc19vdXRwdXQg
JiYgKHMtPnNpemUgPiAwKSkgewoJCQltZW1jcHkocy0+dXNlcl9wdHIsIHMtPmFsaWduZWRfcHRy
LCBzLT5zaXplKTsKCQl9CgkJZnJlZShzLT5hbGlnbmVkX3B0cik7Cgl9CglmcmVlKGRhdGEpOwp9
CgpzdGF0aWMgbWF4X2FjdGlvbnNfdCogU29iZWxHYXVzc2lhbl9jb252ZXJ0X2ludGVybmFsKAoJ
bWF4X2ZpbGVfdCAqbWF4ZmlsZSwKCVNvYmVsR2F1c3NpYW5fYWN0aW9uc190ICppbnRlcmZhY2Vf
YWN0aW9ucywKCWludCAgaXNfaW50ZXJuYWxfY2FsbCwKCXZvaWQgKCoqY2FsbGJhY2tfZnVuYyko
dm9pZCopLAoJdm9pZCAqKmNhbGxiYWNrX2RhdGEpCnsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMg
PSBtYXhfYWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwpOwoJaWYoYWN0aW9ucyA9PSBOVUxMKSBy
ZXR1cm4gTlVMTDsKCiNkZWZpbmUgQ0hFQ0tfRVJST1JTIGlmKCFtYXhfb2soYWN0aW9ucy0+ZXJy
b3JzKSkgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShhY3Rpb25zLT5lcnJv
cnMpKTsgcmV0dXJuIE5VTEw7IH0gCgoJU29iZWxHYXVzc2lhbl9jYWxsYmFja19kYXRhX3QgKmNi
X2RhdGEgPSBOVUxMOwoJaW50IHVzZV9jYWxsYmFjayA9IChjYWxsYmFja19mdW5jICE9IE5VTEwp
ICYmIChjYWxsYmFja19kYXRhICE9IE5VTEwpOwoJaWYgKHVzZV9jYWxsYmFjaykgewoJCWNiX2Rh
dGEgPSBtYWxsb2Moc2l6ZW9mKFNvYmVsR2F1c3NpYW5fY2FsbGJhY2tfZGF0YV90KSk7CgkJaWYg
KGNiX2RhdGEgPT0gTlVMTCkgewoJCQlmcHJpbnRmKHN0ZGVyciwgIlVuYWJsZSB0byBhbGxvY2F0
ZSBtZW1vcnkgZm9yIHN0cmVhbSBjYWxsYmFjayBkYXRhIGluIGZ1bmN0aW9uIFNvYmVsR2F1c3Np
YW5fY29udmVydF9pbnRlcm5hbFxuIik7CgkJCXJldHVybiBOVUxMOwoJCX0KCQljYl9kYXRhLT5t
YXhfY291bnQgPSAzOwoJCWNiX2RhdGEtPmNvdW50ICAgICA9IDA7CgkJKmNhbGxiYWNrX2RhdGEg
ICAgID0gY2JfZGF0YTsKCQkqY2FsbGJhY2tfZnVuYyAgICAgPSAmU29iZWxHYXVzc2lhbl9jYWxs
YmFja19pbnRlcm5hbDsKCX0KCglpbnQzMl90IHBhcmFtX04gPSBpbnRlcmZhY2VfYWN0aW9ucy0+
cGFyYW1fTjsKCQoJLyogY29kZSBmb3Igc2NhbGFyIFNvYmVsR2F1c3NpYW5LZXJuZWwucnVuX2N5
Y2xlX2NvdW50ICovCgl1aW50NjRfdCB0aWNrc19Tb2JlbEdhdXNzaWFuS2VybmVsID0gcGFyYW1f
TjsKCW1heF9zZXRfdGlja3MoYWN0aW9ucywgIlNvYmVsR2F1c3NpYW5LZXJuZWwiLCBwYXJhbV9O
KTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIgU29iZWxHYXVzc2lh
bktlcm5lbC5ydW5fY3ljbGVfY291bnQqLwoJCglpbnQ2NF90IHRtcF8wID0gKHBhcmFtX04gKiA0
KTsKCQoJLyogY29kZSBmb3Igc3RyZWFtIGluSW1hZ2UgKi8KCXNpemVfdCBpbnN0cmVhbV9zaXpl
X2luSW1hZ2UgPSB0bXBfMDsKCWlmIChpbnN0cmVhbV9zaXplX2luSW1hZ2UgPiAwKSB7CgkJY29u
c3QgaW50MzJfdCAqc3RyZWFtX3B0ciA9IGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9pbklt
YWdlOwoJCWlmICh1c2VfY2FsbGJhY2sgJiYgKDEgPT0gU29iZWxHYXVzc2lhbl9jaGVja19hbGln
bmVkKGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9pbkltYWdlKSkpIHsKCQkJaW50MzJfdCAq
YWxpZ25lZF9pbnN0cmVhbV9pbkltYWdlID0gbWFsbG9jKGluc3RyZWFtX3NpemVfaW5JbWFnZSk7
CgkJCWlmIChhbGlnbmVkX2luc3RyZWFtX2luSW1hZ2UgPT0gTlVMTCkgewoJCQkJbWF4X3JlcG9y
dF9lcnJvcl9zbGljKGFjdGlvbnMtPmVycm9ycywgX19GSUxFX18sIF9fTElORV9fLCA1MjYsICJG
YWlsZWQgdG8gYWxsb2NhdGUgYWxpZ25lZCBtZW1vcnkgZm9yIHN0cmVhbSAnaW5JbWFnZSciKTsK
CQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3Vu
dF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFt
X2luSW1hZ2U7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmFsaWduZWRf
cHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVkX2luc3RyZWFtX2luSW1hZ2U7CgkJCSgmY2JfZGF0YS0+
c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnNpemUgICAgICAgID0gaW5zdHJlYW1fc2l6ZV9pbklt
YWdlOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQgICA9
IDA7CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCW1lbWNweShhbGlnbmVkX2luc3RyZWFtX2lu
SW1hZ2UsIGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9pbkltYWdlLCBpbnN0cmVhbV9zaXpl
X2luSW1hZ2UpOwoJCQlzdHJlYW1fcHRyID0gYWxpZ25lZF9pbnN0cmVhbV9pbkltYWdlOwoJCX0K
CQltYXhfcXVldWVfaW5wdXQoYWN0aW9ucywgImluSW1hZ2UiLCBzdHJlYW1fcHRyLCBpbnN0cmVh
bV9zaXplX2luSW1hZ2UpOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBz
dHJlYW0gaW5JbWFnZSAqLwoJCglpbnQ2NF90IHRtcF8xID0gKHBhcmFtX04gKiA0KTsKCQoJLyog
Y29kZSBmb3Igc3RyZWFtIG5vaXNlICovCglzaXplX3QgaW5zdHJlYW1fc2l6ZV9ub2lzZSA9IHRt
cF8xOwoJaWYgKGluc3RyZWFtX3NpemVfbm9pc2UgPiAwKSB7CgkJY29uc3QgZmxvYXQgKnN0cmVh
bV9wdHIgPSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1fbm9pc2U7CgkJaWYgKHVzZV9jYWxs
YmFjayAmJiAoMSA9PSBTb2JlbEdhdXNzaWFuX2NoZWNrX2FsaWduZWQoaW50ZXJmYWNlX2FjdGlv
bnMtPmluc3RyZWFtX25vaXNlKSkpIHsKCQkJZmxvYXQgKmFsaWduZWRfaW5zdHJlYW1fbm9pc2Ug
PSBtYWxsb2MoaW5zdHJlYW1fc2l6ZV9ub2lzZSk7CgkJCWlmIChhbGlnbmVkX2luc3RyZWFtX25v
aXNlID09IE5VTEwpIHsKCQkJCW1heF9yZXBvcnRfZXJyb3Jfc2xpYyhhY3Rpb25zLT5lcnJvcnMs
IF9fRklMRV9fLCBfX0xJTkVfXywgNTI2LCAiRmFpbGVkIHRvIGFsbG9jYXRlIGFsaWduZWQgbWVt
b3J5IGZvciBzdHJlYW0gJ25vaXNlJyIpOwoJCQkJQ0hFQ0tfRVJST1JTOwoJCQl9CgkJCSgmY2Jf
ZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnVzZXJfcHRyICAgID0gKHVpbnQ4X3QqKSBp
bnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1fbm9pc2U7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2Ni
X2RhdGEtPmNvdW50XSktPmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVkX2luc3RyZWFt
X25vaXNlOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5zaXplICAgICAg
ICA9IGluc3RyZWFtX3NpemVfbm9pc2U7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNv
dW50XSktPmlzX291dHB1dCAgID0gMDsKCQkJY2JfZGF0YS0+Y291bnQgKz0gMTsKCQkJbWVtY3B5
KGFsaWduZWRfaW5zdHJlYW1fbm9pc2UsIGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9ub2lz
ZSwgaW5zdHJlYW1fc2l6ZV9ub2lzZSk7CgkJCXN0cmVhbV9wdHIgPSBhbGlnbmVkX2luc3RyZWFt
X25vaXNlOwoJCX0KCQltYXhfcXVldWVfaW5wdXQoYWN0aW9ucywgIm5vaXNlIiwgc3RyZWFtX3B0
ciwgaW5zdHJlYW1fc2l6ZV9ub2lzZSk7CgkJQ0hFQ0tfRVJST1JTOwoJfQoJLyogZW5kIG9mIGNv
ZGUgZm9yIHN0cmVhbSBub2lzZSAqLwoJCglpbnQ2NF90IHRtcF8yID0gKHBhcmFtX04gKiA0KTsK
CQoJLyogY29kZSBmb3Igc3RyZWFtIG91dEltYWdlICovCglzaXplX3Qgb3V0c3RyZWFtX3NpemVf
b3V0SW1hZ2UgPSB0bXBfMjsKCWlmIChvdXRzdHJlYW1fc2l6ZV9vdXRJbWFnZSA+IDApIHsKCQlp
bnQzMl90ICpzdHJlYW1fcHRyID0gaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV9vdXRJbWFn
ZTsKCQlpZiAodXNlX2NhbGxiYWNrICYmICgxID09IFNvYmVsR2F1c3NpYW5fY2hlY2tfYWxpZ25l
ZChpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c3RyZWFtX291dEltYWdlKSkpIHsKCQkJaW50MzJfdCAq
YWxpZ25lZF9vdXRzdHJlYW1fb3V0SW1hZ2UgPSBtYWxsb2Mob3V0c3RyZWFtX3NpemVfb3V0SW1h
Z2UpOwoJCQlpZiAoYWxpZ25lZF9vdXRzdHJlYW1fb3V0SW1hZ2UgPT0gTlVMTCkgewoJCQkJbWF4
X3JlcG9ydF9lcnJvcl9zbGljKGFjdGlvbnMtPmVycm9ycywgX19GSUxFX18sIF9fTElORV9fLCA1
MjYsICJGYWlsZWQgdG8gYWxsb2NhdGUgYWxpZ25lZCBtZW1vcnkgZm9yIHN0cmVhbSAnb3V0SW1h
Z2UnIik7CgkJCQlDSEVDS19FUlJPUlM7CgkJCX0KCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0
YS0+Y291bnRdKS0+dXNlcl9wdHIgICAgPSAodWludDhfdCopIGludGVyZmFjZV9hY3Rpb25zLT5v
dXRzdHJlYW1fb3V0SW1hZ2U7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSkt
PmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVkX291dHN0cmVhbV9vdXRJbWFnZTsKCQkJ
KCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+c2l6ZSAgICAgICAgPSBvdXRzdHJl
YW1fc2l6ZV9vdXRJbWFnZTsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+
aXNfb3V0cHV0ICAgPSAxOwoJCQljYl9kYXRhLT5jb3VudCArPSAxOwoJCQlzdHJlYW1fcHRyID0g
YWxpZ25lZF9vdXRzdHJlYW1fb3V0SW1hZ2U7CgkJfQoJCW1heF9xdWV1ZV9vdXRwdXQoYWN0aW9u
cywgIm91dEltYWdlIiwgc3RyZWFtX3B0ciwgb3V0c3RyZWFtX3NpemVfb3V0SW1hZ2UpOwoJCUNI
RUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0gb3V0SW1hZ2UgKi8KCQoJ
aWYgKHVzZV9jYWxsYmFjayAmJiBjYl9kYXRhLT5jb3VudCA9PSAwKSB7CgkJKmNhbGxiYWNrX2Rh
dGEgPSBOVUxMOwoJCSpjYWxsYmFja19mdW5jID0gTlVMTDsKCQlmcmVlKGNiX2RhdGEpOwoJfQoJ
cmV0dXJuIGFjdGlvbnM7CiN1bmRlZiBDSEVDS19FUlJPUlMKfQoKdm9pZCBTb2JlbEdhdXNzaWFu
KAoJaW50MzJfdCBwYXJhbV9OLAoJY29uc3QgaW50MzJfdCAqaW5zdHJlYW1faW5JbWFnZSwKCWNv
bnN0IGZsb2F0ICppbnN0cmVhbV9ub2lzZSwKCWludDMyX3QgKm91dHN0cmVhbV9vdXRJbWFnZSkK
ewoJKHZvaWQpIHB0aHJlYWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgU29iZWxHYXVz
c2lhbl9zdGF0aWNfaW5pdCk7CglDSEVDS19OVUxMKHN0b3JlZF9tYXhmaWxlLCAiTWF4ZmlsZSB3
YXMgbm90IGxvYWRlZCIsICk7CgltYXhfcnVuX3QgKnJ1biA9IFNvYmVsR2F1c3NpYW5fbm9uYmxv
Y2socGFyYW1fTiwgaW5zdHJlYW1faW5JbWFnZSwgaW5zdHJlYW1fbm9pc2UsIG91dHN0cmVhbV9v
dXRJbWFnZSk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7Cglt
YXhfd2FpdChydW4pOwp9CgptYXhfcnVuX3QgKlNvYmVsR2F1c3NpYW5fbm9uYmxvY2soCglpbnQz
Ml90IHBhcmFtX04sCgljb25zdCBpbnQzMl90ICppbnN0cmVhbV9pbkltYWdlLAoJY29uc3QgZmxv
YXQgKmluc3RyZWFtX25vaXNlLAoJaW50MzJfdCAqb3V0c3RyZWFtX291dEltYWdlKQp7CglTb2Jl
bEdhdXNzaWFuX2FjdGlvbnNfdCBpbnRlcmZhY2VfYWN0aW9uczsKCWludGVyZmFjZV9hY3Rpb25z
LnBhcmFtX04gPSBwYXJhbV9OOwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zdHJlYW1faW5JbWFnZSA9
IGluc3RyZWFtX2luSW1hZ2U7CglpbnRlcmZhY2VfYWN0aW9ucy5pbnN0cmVhbV9ub2lzZSA9IGlu
c3RyZWFtX25vaXNlOwoJaW50ZXJmYWNlX2FjdGlvbnMub3V0c3RyZWFtX291dEltYWdlID0gb3V0
c3RyZWFtX291dEltYWdlOwoJKHZvaWQpIHB0aHJlYWRfb25jZSgmc2xpY19ic19pc19pbml0aWFs
aXNlZCwgU29iZWxHYXVzc2lhbl9zdGF0aWNfaW5pdCk7CglDSEVDS19OVUxMKHN0b3JlZF9tYXhm
aWxlLCAiTWF4ZmlsZSB3YXMgbm90IGxvYWRlZCIsIE5VTEwpOwoJdm9pZCAoKmNiX2Z1bmMpKHZv
aWQqKSA9IE5VTEw7Cgl2b2lkICAqY2JfZGF0YSAgICAgICAgID0gTlVMTDsKCW1heF9hY3Rpb25z
X3QgKmFjdGlvbnMgPSBTb2JlbEdhdXNzaWFuX2NvbnZlcnRfaW50ZXJuYWwoc3RvcmVkX21heGZp
bGUsICZpbnRlcmZhY2VfYWN0aW9ucywgMSwgJmNiX2Z1bmMsICZjYl9kYXRhKTsKCUNIRUNLX05V
TEwoYWN0aW9ucywgIlVuYWJsZSB0byBidWlsZCBhY3Rpb25zIiwgTlVMTCk7CgltYXhfdmFsaWRh
dGUoYWN0aW9ucyk7CglDSEVDS19FUlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7CglDSEVDS19FUlJP
UlNfU1Qoc3RvcmVkX2VuZ2luZSwgTlVMTCk7CgltYXhfcnVuX3QgKnJ1bjsKCWlmIChjYl9mdW5j
ID09IE5VTEwpIHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2NrKHN0b3JlZF9lbmdpbmUsIGFjdGlv
bnMpOwoJfSBlbHNlIHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2NrX3dpdGhfY2Ioc3RvcmVkX2Vu
Z2luZSwgYWN0aW9ucywgY2JfZnVuYywgY2JfZGF0YSk7Cgl9CglDSEVDS19OVUxMKHJ1biwgIlVu
YWJsZSB0byBydW4gYWN0aW9ucyIsIE5VTEwpOwoJQ0hFQ0tfRVJST1JTX1NUKGFjdGlvbnMsIE5V
TEwpOwoJbWF4X2FjdGlvbnNfZnJlZShhY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCnZvaWQgU29i
ZWxHYXVzc2lhbl9ydW4oCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCVNvYmVsR2F1c3NpYW5fYWN0
aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X3J1bl90ICpydW4gPSBTb2JlbEdhdXNz
aWFuX3J1bl9ub25ibG9jayhlbmdpbmUsIGludGVyZmFjZV9hY3Rpb25zKTsKCUNIRUNLX05VTEwo
cnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCm1heF9y
dW5fdCAqU29iZWxHYXVzc2lhbl9ydW5fbm9uYmxvY2soCgltYXhfZW5naW5lX3QgKmVuZ2luZSwK
CVNvYmVsR2F1c3NpYW5fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X2ZpbGVf
dCAqbWF4ZmlsZSA9IG1heF9lbmdpbmVfZ2V0X21heF9maWxlKGVuZ2luZSk7IAoJdm9pZCAoKmNi
X2Z1bmMpKHZvaWQqKSA9IE5VTEw7Cgl2b2lkICAqY2JfZGF0YSAgICAgICAgID0gTlVMTDsKCW1h
eF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBTb2JlbEdhdXNzaWFuX2NvbnZlcnRfaW50ZXJuYWwobWF4
ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDEsICZjYl9mdW5jLCAmY2JfZGF0YSk7CglDSEVDS19F
UlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7CgltYXhfcnVuX3QgKnJ1bjsKCWlmIChjYl9mdW5jID09
IE5VTEwpIHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2NrKGVuZ2luZSwgYWN0aW9ucyk7Cgl9IGVs
c2UgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2tfd2l0aF9jYihlbmdpbmUsIGFjdGlvbnMsIGNi
X2Z1bmMsIGNiX2RhdGEpOwoJfQoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlv
bnMiLCBOVUxMKTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoK
LyoqCiAqIFxicmllZiBHcm91cCBydW4gYWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUg
aW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVz
ZS4KICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFjZV9hY3Rpb25zIEFjdGlvbnMgdG8gcnVuLgog
KgogKiBSdW4gdGhlIGFjdGlvbnMgb24gdGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhl
IGdyb3VwLgogKi8Kdm9pZCBTb2JlbEdhdXNzaWFuX3J1bl9ncm91cChtYXhfZ3JvdXBfdCAqZ3Jv
dXAsIFNvYmVsR2F1c3NpYW5fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X3J1
bl90ICpydW4gPSBTb2JlbEdhdXNzaWFuX3J1bl9ncm91cF9ub25ibG9jayhncm91cCwgaW50ZXJm
YWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCAp
OwoJbWF4X3dhaXQocnVuKTsKfQoKCi8qKgogKiBcYnJpZWYgR3JvdXAgcnVuIGFkdmFuY2VkIHN0
YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgog
KiAKICoKICogU2NoZWR1bGUgdGhlIGFjdGlvbnMgdG8gcnVuIG9uIHRoZSBmaXJzdCBkZXZpY2Ug
YXZhaWxhYmxlIGluIHRoZSBncm91cCBhbmQgcmV0dXJuIGltbWVkaWF0ZWx5LgogKiBUaGUgc3Rh
dHVzIG9mIHRoZSBydW4gbXVzdCBiZSBjaGVja2VkIHdpdGggOjptYXhfd2FpdC4gCiAqIE5vdGUg
dGhhdCB1c2Ugb2YgOjptYXhfbm93YWl0IGlzIHByb2hpYml0ZWQgd2l0aCBub24tYmxvY2tpbmcg
cnVubmluZyBvbiBncm91cHM6CiAqIHNlZSB0aGUgOjptYXhfcnVuX2dyb3VwX25vbmJsb2NrIGRv
Y3VtZW50YXRpb24gZm9yIG1vcmUgZXhwbGFuYXRpb24uCiAqCiAqIFxwYXJhbSBbaW5dIGdyb3Vw
IEdyb3VwIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0
byBydW4uCiAqIFxyZXR1cm4gQSBoYW5kbGUgb24gdGhlIGV4ZWN1dGlvbiBzdGF0dXMgb2YgdGhl
IGFjdGlvbnMsIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9ydW5fdCAqU29iZWxH
YXVzc2lhbl9ydW5fZ3JvdXBfbm9uYmxvY2sobWF4X2dyb3VwX3QgKmdyb3VwLCBTb2JlbEdhdXNz
aWFuX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9maWxlX3QgKm1heGZpbGUg
PSBtYXhfZ3JvdXBfZ2V0X21heF9maWxlKGdyb3VwKTsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMg
PSBTb2JlbEdhdXNzaWFuX2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlv
bnMsIDEsIE5VTEwsIE5VTEwpOwoJaWYoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCWlm
KCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgltYXhfdmFsaWRhdGUoYWN0
aW9ucyk7CgltYXhfcnVuX3QgKnJ1biA9IG1heF9ydW5fZ3JvdXBfbm9uYmxvY2soZ3JvdXAsIGFj
dGlvbnMpOwoJbWF4X2FjdGlvbnNfZnJlZShhY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCgovKioK
ICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRl
cmZhY2UgJ2RlZmF1bHQnLgogKiAKICogXHBhcmFtIFtpbl0gZW5nYXJyYXkgVGhlIGFycmF5IG9m
IGRldmljZXMgdG8gdXNlLgogKiBccGFyYW0gW2luLG91dF0gaW50ZXJmYWNlX2FjdGlvbnMgVGhl
IGFycmF5IG9mIGFjdGlvbnMgdG8gcnVuLgogKgogKiBSdW4gdGhlIGFycmF5IG9mIGFjdGlvbnMg
b24gdGhlIGFycmF5IG9mIGVuZ2luZXMuICBUaGUgbGVuZ3RoIG9mIGludGVyZmFjZV9hY3Rpb25z
CiAqIG11c3QgbWF0Y2ggdGhlIHNpemUgb2YgZW5nYXJyYXkuCiAqLwp2b2lkIFNvYmVsR2F1c3Np
YW5fcnVuX2FycmF5KG1heF9lbmdhcnJheV90ICplbmdhcnJheSwgU29iZWxHYXVzc2lhbl9hY3Rp
b25zX3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9ydW5fdCAqcnVuID0gU29iZWxHYXVz
c2lhbl9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGludGVyZmFjZV9hY3Rpb25zKTsKCUNI
RUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7
Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBzdGF0aWMgbm9uLWJsb2NraW5n
IGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqCiAqIFNjaGVkdWxl
IHRvIHJ1biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkgb2YgZW5naW5lcywgYW5k
IHJldHVybiBpbW1lZGlhdGVseS4KICogVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2VfYWN0aW9ucyBt
dXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKiBUaGUgc3RhdHVzIG9mIHRoZSBydW4g
Y2FuIGJlIGNoZWNrZWQgZWl0aGVyIGJ5IDo6bWF4X3dhaXQgb3IgOjptYXhfbm93YWl0OwogKiBu
b3RlIHRoYXQgb25lIG9mIHRoZXNlICptdXN0KiBiZSBjYWxsZWQsIHNvIHRoYXQgYXNzb2NpYXRl
ZCBtZW1vcnkgY2FuIGJlIHJlbGVhc2VkLgogKgogKiBccGFyYW0gW2luXSBlbmdhcnJheSBUaGUg
YXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25z
IFRoZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0aGUg
ZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9y
LgogKi8KbWF4X3J1bl90ICpTb2JlbEdhdXNzaWFuX3J1bl9hcnJheV9ub25ibG9jayhtYXhfZW5n
YXJyYXlfdCAqZW5nYXJyYXksIFNvYmVsR2F1c3NpYW5fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0
aW9uc1tdKQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2VuZ2FycmF5X2dldF9tYXhfZmls
ZShlbmdhcnJheSwgMCk7CglpbnQgaTsKCW1heF9hY3RhcnJheV90ICphY3RhcnJheSA9IG1heF9h
Y3RhcnJheV9pbml0KG1heGZpbGUsIGVuZ2FycmF5LT5zaXplKTsKCWlmIChhY3RhcnJheSA9PSBO
VUxMKSByZXR1cm4gTlVMTDsKCW1heF9hY3Rpb25zX3QgKiphcnJfYWN0aW9ucyA9IG1hbGxvYyhl
bmdhcnJheS0+c2l6ZSAqIHNpemVvZihtYXhfYWN0aW9uc190KikpOwoJZm9yICggaSA9IDAgOyBp
IDwgYWN0YXJyYXktPnNpemU7IGkrKyApIHsKCQltYXhfYWN0aW9uc190ICphY3Rpb25zID0gU29i
ZWxHYXVzc2lhbl9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25zW2ld
LCAxLCBOVUxMLCBOVUxMKTsKCQlpZiAoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCQlh
cnJfYWN0aW9uc1tpXSA9IGFjdGlvbnM7CgkJbWF4X3NldF9hY3Rpb24oYWN0YXJyYXksIGksIGFj
dGlvbnMpOwoJfQoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2FycmF5X25vbmJsb2NrKGVuZ2Fy
cmF5LCBhY3RhcnJheSk7Cglmb3IgKCBpID0gMCA7IGkgPCBhY3RhcnJheS0+c2l6ZSA7IGkrKyAp
IHsgbWF4X2FjdGlvbnNfZnJlZShhcnJfYWN0aW9uc1tpXSk7IH0KCW1heF9hY3RhcnJheV9mcmVl
KGFjdGFycmF5KTsKCWZyZWUoYXJyX2FjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8qKgogKiBc
YnJpZWYgQ29udmVydHMgYSBzdGF0aWMtaW50ZXJmYWNlIGFjdGlvbiBzdHJ1Y3QgaW50byBhIGR5
bmFtaWMtaW50ZXJmYWNlIG1heF9hY3Rpb25zX3Qgc3RydWN0LgogKgogKiBOb3RlIHRoYXQgdGhp
cyBpcyBhbiBpbnRlcm5hbCB1dGlsaXR5IGZ1bmN0aW9uIHVzZWQgYnkgb3RoZXIgZnVuY3Rpb25z
IGluIHRoZSBzdGF0aWMgaW50ZXJmYWNlLgogKgogKiBccGFyYW0gW2luXSBtYXhmaWxlIFRoZSBt
YXhmaWxlIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGludGVy
ZmFjZS1zcGVjaWZpYyBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBUaGUgZHluYW1pYy1pbnRl
cmZhY2UgYWN0aW9ucyB0byBydW4sIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9h
Y3Rpb25zX3QqIFNvYmVsR2F1c3NpYW5fY29udmVydChtYXhfZmlsZV90ICptYXhmaWxlLCBTb2Jl
bEdhdXNzaWFuX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCXJldHVybiBTb2JlbEdh
dXNzaWFuX2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDAsIE5V
TEwsIE5VTEwpOwp9CgojdW5kZWYgQ0hFQ0tfRVJST1JTX1NUCiN1bmRlZiBDSEVDS19OVUxMCgoK

#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 20, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 4, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 43, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 7, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 35, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 42, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 9, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 41, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 11, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 40, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 16, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 1, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 17, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 22, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 24, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 25, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 28, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 37, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 30, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 31, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 33, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 34, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianKernel, 32, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c02144c8d4b54194229229baa3a18726e68797a95d64e021453a9b8a9126af651b9dffcbd9a0afd4b69f8a0fd")
#endif

